[15.06.2009]

  Compare: http://freelancing-god.github.com/ts/en/
  Description of thinking-sphinx gem.

[13.10.2009]

Currently, almost everything what I write is rendered by Ruby on Rails
and Sinatra applications. To improve the readability of the text, I
want the code fragments to be colored. So extending Rails and Sinatra
frameworks with syntax highlighting is a must.

The problem is to how syntax highlighting features are hooked into
these frameworks.

Look at the current practice. To this end, analyze the top three tools
listed on *The Ruby Toolbox* in category 
[Syntax Highlighting](http://ruby-toolbox.com/categories/syntax_highlighting.html).

[tm_syntax_highlighting](http://github.com/arya/tm_syntax_highlighting/) (plugin):

    code(some_ruby_code, :theme => "twilight", :lang => "ruby", :line_numbers => true)

[harsh](http://carboni.ca/projects/harsh/) (plugin):

    <% harsh :theme => :dawn do %>    |    <% harsh %Q{ some_ruby_code }, :theme => :dawn %>
      some_ruby_code                  |
    <% end %>                         |

[Redcloth with CodeRay](http://github.com/augustl/redcloth-with-coderay) (gem):

    <source:ruby> some_ruby_code </source> 

In each piece of code inserted into html we must change:
`<` to `&lt;`. This is annoying thing.

Analyze packages mentioned at the *The Ruby Toolbox* page:
[Syntax Highlighting](http://ruby-toolbox.com/categories/syntax_highlighting.html)

[5.12.2011]

[Syntax Highlighting on the Web](http://achinghead.com/archive/88/syntax-highlighting-web/):

Another problem is that each of those JavaScript libraries uses a slightly different syntax 
to determine what code blocks are to be highlighted and what language to highlight them as. 
In other words, a library like Markdown can't just output all its code blocks using one 
format and expect it to work with any JavaScript syntax highlighting library. 
And that's a problem.
